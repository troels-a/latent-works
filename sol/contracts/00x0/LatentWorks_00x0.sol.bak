//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.2;

import "@openzeppelin/contracts/token/ERC1155/ERC1155.sol";
import "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import './../77x7/ILW77x7.sol';
import './base64.sol';
import './Rando.sol';
import 'hardhat/console.sol';

/**

          ___  ___      ___        __   __        __  
|     /\   |  |__  |\ |  |   |  | /  \ |__) |__/ /__` 
|___ /~~\  |  |___ | \|  |  .|/\| \__/ |  \ |  \ .__/ 
                                                      
"00x0", troels_a, 2021


*/

contract LatentWorks_00x0 is ERC1155, ERC1155Supply, Ownable {

    using Counters for Counters.Counter;

    struct CompInfo {
        uint[] works_;
        bytes elements_;
        string seed_;
        string seed2_;
        string dim_;
    }

    string public constant NAME = "Latent Works \xc2\xb7 00x0";
    string public constant DESCRIPTION = "latent.works";
    uint public constant MAX_WORK_USE = 7;
    
    ILW77x7 _77x7;

    Counters.Counter private _comp_ids;
    mapping(uint => uint[]) private _comp_works;
    mapping(uint => address) private _comp_creators;
    mapping(uint => uint) private _comp_seeds;

    mapping(uint => uint) private _work_used_count;

    uint panel_dim_ = 100;

    constructor() ERC1155("") {
        _77x7 = ILW77x7(0xEF7c89F051ac48885b240eb53934B04fcF3339ab);
    }

    
    uint private _price = 0.1 ether;

    
    function create(uint[] memory works_) public {

        require((works_.length >= 2 && works_.length <= 7), "WRONG_WORK_COUNT");
        // require(canCreate(msg.sender, works_), "NOT_ELIGIBLE");

        _comp_ids.increment();
        uint comp_id_ = _comp_ids.current();
        _comp_works[comp_id_] = works_;
        _comp_seeds[comp_id_] = block.timestamp+works_[0]+works_[1];

        _mintFor(msg.sender, comp_id_);

    }

    function canCreate(address test_, uint[] memory works_) public view returns(bool){
        uint last_work_;
        for (uint256 i = 0; i < works_.length; i++) {
            if((_77x7.balanceOf(test_, works_[i])) < 1)
                return false;
            if(_work_used_count[works_[i]] > MAX_WORK_USE)
                return false;
            if(last_work_ == works_[i])
                return false;
        }
        return true;
    }


    function _mintFor(address for_, uint comp_id_) private {
        _mint(for_, comp_id_, 1, "");
    }


    function mint(uint comp_id_) public payable {

        require(msg.value >= _price, "VALUE_TOO_LOW");
        require(getAvailable(comp_id_) > 0, "UNAVAILABLE");
        
        address owner_ = owner();
        uint each_ = msg.value / 2;
        (bool creator_sent_, bytes memory data_creator_) =  _comp_creators[comp_id_].call{value: each_}("");
        (bool owner_sent_, bytes memory data_owner_) =  owner_.call{value: each_}("");
        require((creator_sent_ && owner_sent_), "INTERNAL_ETHER_TX_FAILED");

        _mintFor(msg.sender, comp_id_);

    }

    function getAvailable(uint comp_id_) public view returns(uint){
        return _comp_works[comp_id_].length - totalSupply(comp_id_);
    }

    // function _getElement(uint comp_id_, uint index_) private view returns(bytes memory){

    //     ILW77x7.Work memory work_ = _77x7.getWork(_comp_works[comp_id_][index_]);
    //     uint num_works_ = _comp_works[comp_id_].length;

    //     string memory seed_ = string(abi.encodePacked(comp_id_, Strings.toString(index_)));
    //     string memory X = '50';
    //     uint D;
    //     string memory DString;
    //     string memory C = work_.colors[Rando.number(seed_, 1, 7)];
    //     bytes memory output_;
        
    //     for (uint256 i = 0; i < work_.colors.length; i++) {
            
    //         seed_ = string(abi.encodePacked(comp_id_, Strings.toString(index_), Strings.toString(i)));
    //         D = (1*i+1)*(num_works_ - index_);
    //         DString = Strings.toString(D);
    //         // console.log(D);
    //         // X = Strings.toString(50-(D/2));
    //         // Y = 35;

    //         output_ = abi.encodePacked(output_, '<radialGradient id="',seed_,'"><stop offset="0%" stop-color="transparent"/><stop offset="100%" stop-color="',C,'"/></radialGradient><circle cx="',X,'" cy="',X,'" r="',DString,'" fill="',seed_,'"><animate attributeType="xml" attributeName="fill-opacity" begin="0s" values="0;0.2;0;0.4;1;0" dur="',Strings.toString(Rando.number(seed_, 10, 20)),'s" repeatCount="indefinite"/>',
    //         '</circle>');
    //     }

    //     return output_;
        
    // }
    
    /// @notice Explain to an end user what this does
    /// @dev Explain to a developer any extra details
    /// @param comp_id_ a parameter just like in doxygen (must be followed by parameter name)
    /// @return Documents the return variables of a contractâ€™s function state variable
    function getSeed(uint comp_id_, string memory append_) public view returns(string memory){
        return string(abi.encodePacked(Strings.toString(_comp_seeds[comp_id_]), append_));
    }

    function getSVG(uint comp_id_, bool mark_, bool encode_) public view returns(string memory){

        // TODO: Do not reveal before mint!

        CompInfo memory comp_ = CompInfo(
            _comp_works[comp_id_],
            '',
            getSeed(comp_id_, ''),
            getSeed(comp_id_, Strings.toString(comp_id_)),
            ''
        );

        uint c = comp_.works_.length;
        while(c > 0){

            comp_.dim_ = Strings.toString(c*7);

            comp_.elements_ = abi.encodePacked(comp_.elements_,
            '<radialGradient id="',getSeed(comp_id_, comp_.dim_),'" cx="0.5" cy="0.5" r="1" fx="0.5" fy="0.5" spreadMethod="pad">',
            '<stop offset="0%" stop-color="',_77x7.getColor(comp_.works_[c-1], 1),'"/><stop offset="100%" stop-color="', (c < comp_.works_.length) ? _77x7.getColor(comp_.works_[c-1], 7) : 'rgba(0,0,0,0)', '"/>',
            '</radialGradient>',
            '<rect filter="url(#blur)" fill-opacity="0.3" fill="url(#',getSeed(comp_id_, comp_.dim_),')" width="',comp_.dim_,'" height="',comp_.dim_,'" y="0" x="0">',
            // '<animate attributeType="xml" attributeName="fill-opacity" begin="0s" values="0.3;0.1;0.3;0.1;0.4;0.1;0.3" dur="',Strings.toString(Rando.number(getSeed(comp_id_, dim_), 8, 20)),'" repeatCount="indefinite" />',
            '</rect>');
            c--;
        }

        bytes memory output_ = abi.encodePacked(
            '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" preserveAspectRatio="xMinYMin meet">',
            '<defs><radialGradient id="wrap',comp_.seed_,'" cx="0.5" cy="0.5" r="1" fx="0.5" fy="0.5" spreadMethod="pad">',
                '<stop offset="20%" stop-color="rgba(0,0,0,0)"/>'
                '<stop offset="100%" stop-color="',_77x7.getColor(comp_.works_[0], 1),'"/>'
            '</radialGradient>',
            '<g id="main">',
            comp_.elements_,
            '</g>',
            '<filter id="blur" x="0" y="0" primitiveUnits="objectBoundingBox"><feGaussianBlur in="SourceGraphic" stdDeviation="0.05"/></filter>',
            '<rect id="bg" height="100%" width="100%" x="0" y="0"/><clipPath id="clip"><use href="url(#bg)"/></clipPath></defs>',
            '<g clip-path="#clip">',
            // '<use href="#bg" fill="url(#',comp_.seed_,')" fill-opacity="0.3"/>',
            '<use href="#bg" fill="white"/>',
            '<use href="#main" transform="rotate(90 50 50)" x="',Strings.toString(Rando.number(comp_.seed_, 10, 60)),'" y="',Strings.toString(Rando.number(comp_.seed_, 10, 60)),'"/>',
            '<use href="#main" x="',Strings.toString(Rando.number(comp_.seed2_, 10, 60)),'" y="',Strings.toString(Rando.number(comp_.seed2_, 10, 60)),'"/>',
            '<use href="#bg" fill="url(#wrap',comp_.seed_,')"/>',
            mark_ ? '' : '',
            '</g></svg>'
        );

        if(encode_)
            return Base64.encode(output_);

        return string(output_);

    }


    function uri(uint comp_id_) public view override returns(string memory){
        string memory image_ = getSVG(comp_id_, true, true);
        return image_;
    }


    // Required overrides
    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal override (ERC1155, ERC1155Supply) {
        super._mint(account, id, amount, data);
    }


    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal override (ERC1155, ERC1155Supply) {
        super._mintBatch(to, ids, amounts, data);
    }


    function _burn(address account, uint256 id, uint256 amount) internal override (ERC1155, ERC1155Supply) {
        super._burn(account, id, amount);
    }


    function _burnBatch(address to, uint256[] memory ids, uint256[] memory amounts) internal override (ERC1155, ERC1155Supply) {
        super._burnBatch(to, ids, amounts);
    }


}

